from math import factorial
from time import clock
import bisect
import random

def gcd(a, b):
	if b == 0:
		return a
	while b:
		a, b = b, a % b
	return a
    
def totients(n, p=False):
    l = [1]
    for i in range(2, n):
        if gcd(i, n) == 1:
            l.append(i)
    
    if p: print(l)
    return l
        
def find_prime3(x):
    d = [1 for i in range(x + 1)]
    d[0] = 0
    d[1] = 0
    for i in range(2, int(x ** 0.5) + 1):
        if d[i]:
            for j in range(i ** 2, x + 1, i):
                d[j] = 0

    return [i for i in range(x + 1) if d[i]]

primes = find_prime3(2 * 10 ** 5)

def factorize_l(n):
    f = []
    for p in primes:
    #id = bisect.bisect(primes, n)
    #for i in range(0, id + 1):
    #    p = primes[i]
        if p > n:
            break
        while n % p == 0:
            f.append(p)
            n //= p
    return f

def factorize_s(n):
    f = set()
    for p in primes:
        if p > n:
            break
        while n % p == 0:
            f.add(p)
            n //= p
    return f
    
def pollardRho(N):
        if N%2==0:
                return 2
        x = random.randint(1, N-1)
        y = x
        c = random.randint(1, N-1)
        g = 1
        while g==1:             
                x = ((x*x)%N+c)%N
                y = ((y*y)%N+c)%N
                y = ((y*y)%N+c)%N
                g = gcd(abs(x-y),N)
        return g
        
def pollard_brent(n):
    if n % 2 == 0: return 2
    if n % 3 == 0: return 3

    y, c, m = random.randint(1, n-1), random.randint(1, n-1), random.randint(1, n-1)
    g, r, q = 1, 1, 1
    while g == 1:
        x = y
        for i in range(r):
            y = (pow(y, 2, n) + c) % n

        k = 0
        while k < r and g==1:
            ys = y
            for i in range(min(m, r-k)):
                y = (pow(y, 2, n) + c) % n
                q = q * abs(x-y) % n
            g = gcd(q, n)
            k += m
        r *= 2
    if g == n:
        while True:
            ys = (pow(ys, 2, n) + c) % n
            g = gcd(abs(x - ys), n)
            if g > 1:
                break

    return g
    
def factorize_b(n):
    f = []
    x = pollard_brent(n)
    f.append(x)
    y = n // x
    #print(x, y)
    while y > 1:
        x = pollard_brent(y)
        f.append(x)
        y //= x
        #print(x, y)
        
    return f    

sp = set(primes)  
cache = []
def factorize_sc(n):
    f = set()
    if n in sp:
        f.add(n)
    else:
        for p in primes:
            if p > n:
                break
            while n % p == 0:
                f.add(p)
                n //= p
            
    cache.append(f)   
    return f
    
threshold = 8 * 10 ** 4

def build_cache():
    for i in range(1, threshold + 1):
        factorize_sc(i)
    
def factorize_ultimate(n):
    if n in sp:
        return {n}
        
    if n < threshold:
        f = cache[n - 1]
    else:
        f = set()
        x = pollard_brent(n)
        f.add(x)
        y = n // x
        while y > 1:
            if y < threshold:
                f.update(cache[y - 1])
                break
            elif y in sp:
                f.add(y)
                break
            x = pollard_brent(y)
            f.add(x)
            y //= x
    return f
    
# Slower than l or s version....
def factorize_u(n):
    f = []
    for p in primes:
    #id = bisect.bisect(primes, n)
    #for i in range(0, id + 1):
    #    p = primes[i]
        if p > n:
            break
        if n % p == 0:
            f.append(p)
            n //= p            
        while n % p == 0:
            n //= p
    return f
    
def pho(n):
    p = n
    for f in factorize_s(n):
        p = p * (f - 1) // f
    
    return p
    
def tg(n):
    return float(n) / pho(n)

def mrp(n):
    mm = 0
    nn = 1
    for i in range(2, n + 1):
        m = tg(i)
        if m > mm:
            mm = m
            nn = i
            print(mm, nn)

def perm(n):
    return ''.join(sorted(c for c in str(n)))
  
def minrp(n):
    mm = None
    nn = 1
    for i in range(2, n + 1):
        if i in sp or i % 2 == 0:
            continue
        x = pho(i)
        
        #if ''.join(sorted(c for c in str(x))) == ''.join(sorted(c for c in str(i))):
        if perm(x) == perm(i):        
        #if i != x + 1:
            print(i, x, factorize_l(i), float(i) / x)
            key = float(i) / x
            if mm == None or mm > key:
                mm = key
                nn = i
                #print('----', i, factorize_l(i), x, mm)
    print(nn)

#[149, 509]            
#print(factorize_b(93841))
#print(tg(30030), pho(30030))
#print(pho(4))
#print(factorize(10 ** 5 - 1))

def euler070():
    #build_cache()
    minrp(10 ** 5)

euler070()
#for i in range(51):
#    print(i, pho(i))

'''
print(6, tg(6))
print(210, tg(210))
print(30030, tg(30030))
#print(360360, tg(360360))
'''

def seq(n):
    s = 1
    for i in range(n):
        s *= primes[i]
        #if i % 2:
        print(s, tg(s))

#seq(16)
            
'''
for i in range(2, 11):
    x = factorial(i)
    print(x, tg(x))
'''

#mrp(10 ** 5 )

#
#i = 2
#while i < 10 ** 5:
#    mrp(i)
#    i *= 10

'''
('----', 21, [3, 7], 12, 1.75)
('----', 291, [3, 97], 192, 1.515625)
('----', 2817, [3, 3, 313], 1872, 1.5048076923076923)
('----', 2991, [3, 997], 1992, 1.5015060240963856)
('----', 4435, [5, 887], 3544, 1.2514108352144468)
('----', 20617, [53, 389], 20176, 1.0218576526566217)
('----', 45421, [53, 857], 44512, 1.0204214593817398)
('----', 69271, [53, 1307], 67912, 1.020011190952998)
('----', 75841, [149, 509], 75184, 1.0087385613960418)
('----', 162619, [137, 1187], 161296, 1.008202311278643)
('----', 176569, [317, 557], 175696, 1.0049688097623168)
('----', 284029, [431, 659], 282940, 1.0038488725524846)
('----', 400399, [431, 929], 399040, 1.00340567361668)
('----', 474883, [587, 809], 473488, 1.002946220389957)
('----', 732031, [773, 947], 730312, 1.0023537885177842)
('----', 778669, [797, 977], 776896, 1.0022821587445423)
('----', 783169, [827, 947], 781396, 1.0022690159662961)
'''


'''SET: PYTHONDONTWRITEBYTECODE = 1
$(PYTHONDONTWRITEBYTECODE) = 1
py.exe "D:\Dropbox\Code\Python\Algo\factorization.py"
Process started >>>
(21, 12, [3, 7], 1.75)
('----', 21, [3, 7], 12, 1.75)
(63, 36, [3, 3, 7], 1.75)
(291, 192, [3, 97], 1.515625)
('----', 291, [3, 97], 192, 1.515625)
(2817, 1872, [3, 3, 313], 1.5048076923076923)
('----', 2817, [3, 3, 313], 1872, 1.5048076923076923)
(2991, 1992, [3, 997], 1.5015060240963856)
('----', 2991, [3, 997], 1992, 1.5015060240963856)
(4435, 3544, [5, 887], 1.2514108352144468)
('----', 4435, [5, 887], 3544, 1.2514108352144468)
(5229, 2952, [3, 3, 7, 83], 1.771341463414634)
(5367, 3576, [3, 1789], 1.5008389261744965)
(5637, 3756, [3, 1879], 1.5007987220447285)
(6543, 4356, [3, 3, 727], 1.5020661157024793)
(8541, 5184, [3, 3, 13, 73], 1.6475694444444444)
(17631, 11736, [3, 3, 3, 653], 1.5023006134969326)
(18231, 11832, [3, 59, 103], 1.5408215010141988)
(18261, 12168, [3, 3, 2029], 1.5007396449704142)
(20301, 13200, [3, 67, 101], 1.5379545454545454)
(20617, 20176, [53, 389], 1.0218576526566217)
('----', 20617, [53, 389], 20176, 1.0218576526566217)
(22471, 21472, [23, 977], 1.0465257078986587)
(22851, 15228, [3, 3, 2539], 1.5005910165484633)
(27615, 12576, [3, 5, 7, 263], 2.1958492366412212)
(29817, 19872, [3, 3, 3313], 1.5004528985507246)
(35683, 33568, [17, 2099], 1.0630064346997141)
(44305, 35440, [5, 8861], 1.2501410835214446)
(45421, 44512, [53, 857], 1.0204214593817398)
('----', 45421, [53, 857], 44512, 1.0204214593817398)
(49435, 39544, [5, 9887], 1.2501264414323285)
(51363, 31536, [3, 3, 13, 439], 1.6287100456621004)
(53967, 35976, [3, 17989], 1.5000833889259506)
(54693, 35496, [3, 3, 59, 103], 1.5408215010141988)
(56937, 37956, [3, 18979], 1.5000790388871326)
(60903, 39600, [3, 3, 67, 101], 1.5379545454545454)
(65163, 35616, [3, 7, 29, 107], 1.8295990566037736)
(67045, 45760, [5, 11, 23, 53], 1.4651442307692308)
(67335, 35376, [3, 5, 67, 67], 1.9034090909090908)
(69271, 67912, [53, 1307], 1.020011190952998)
('----', 69271, [53, 1307], 67912, 1.020011190952998)
(74259, 47952, [3, 3, 37, 223], 1.5486111111111112)
(75841, 75184, [149, 509], 1.0087385613960418)
('----', 75841, [149, 509], 75184, 1.0087385613960418)
(84283, 83248, [89, 947], 1.0124327311166634)
(85041, 51480, [3, 3, 11, 859], 1.6519230769230768)
(86965, 69568, [5, 17393], 1.250071872125115)
(87109, 79180, [11, 7919], 1.1001389239706996)
(94813, 93148, [59, 1607], 1.017874779920127)
(95217, 59712, [3, 17, 1867], 1.5946040996784565)
(114109, 111904, [53, 2153], 1.0197043894766944)
(116503, 115360, [113, 1031], 1.0099081137309294)
(119221, 112192, [17, 7013], 1.062651525955505)
(140083, 138040, [71, 1973], 1.0148000579542162)
(152301, 101532, [3, 50767], 1.5000295473348304)
(157021, 150172, [23, 6827], 1.0456077031670352)
(160731, 107136, [3, 3, 3, 5953], 1.5002520161290323)
(162619, 161296, [137, 1187], 1.008202311278643)
('----', 162619, [137, 1187], 161296, 1.008202311278643)
(166017, 110676, [3, 55339], 1.5000271061476742)
(167569, 157696, [17, 9857], 1.062607802353896)
(175821, 115872, [3, 103, 569], 1.517372618061309)
(176481, 117648, [3, 3, 19609], 1.500076499388005)
(176569, 175696, [317, 557], 1.0049688097623168)
('----', 176569, [317, 557], 175696, 1.0049688097623168)
(176931, 117936, [3, 3, 3, 6553], 1.5002289377289377)
(179631, 119736, [3, 3, 3, 6653], 1.500225496091401)
(180261, 120168, [3, 3, 20029], 1.5000748951467946)
(181465, 145168, [5, 36293], 1.2500344428524193)
(182401, 181204, [179, 1019], 1.0066058144411822)
(186021, 112680, [3, 3, 11, 1879], 1.6508785942492012)
(191607, 110976, [3, 13, 17, 17, 17], 1.7265625)
(192087, 109728, [3, 3, 7, 3049], 1.7505741469816274)
(193167, 117936, [3, 3, 13, 13, 127], 1.6378968253968254)
(194181, 119184, [3, 13, 13, 383], 1.6292539267015707)
(199627, 197296, [89, 2243], 1.0118147352201767)
(201123, 123120, [3, 3, 3, 3, 13, 191], 1.6335526315789475)
(201679, 196720, [41, 4919], 1.0252084180561203)
(208413, 132840, [3, 3, 3, 3, 31, 83], 1.5689024390243902)
(211065, 112560, [3, 5, 14071], 1.875133262260128)
(212101, 210112, [113, 1877], 1.0094663798355163)
(224269, 222496, [137, 1637], 1.0079686825830576)
(228051, 152028, [3, 3, 25339], 1.5000591996211223)
(243007, 237040, [41, 5927], 1.0251729665879177)
(256401, 165240, [3, 3, 31, 919], 1.5516884531590414)
(256761, 167256, [3, 3, 47, 607], 1.5351377529057253)
(261259, 259216, [137, 1907], 1.0078814579346953)
(275103, 175032, [3, 3, 3, 23, 443], 1.5717297408473878)
(277621, 276172, [227, 1223], 1.0052467302985095)
(281517, 185712, [3, 107, 877], 1.5158794262083226)
(281805, 150288, [3, 5, 18787], 1.8750998083679336)
(281997, 187992, [3, 3, 31333], 1.500047874377633)
(284029, 282940, [431, 659], 1.0038488725524846)
('----', 284029, [431, 659], 282940, 1.0038488725524846)
(284301, 183240, [3, 3, 31, 1019], 1.5515225933202357)
(285109, 259180, [11, 25919], 1.1000424415464156)
(289071, 192708, [3, 3, 32119], 1.5000467027834858)
(293001, 193200, [3, 101, 967], 1.5165683229813665)
(302181, 183120, [3, 11, 9157], 1.6501802096985583)
(310635, 150336, [3, 3, 3, 3, 5, 13, 59], 2.066271551724138)
(320643, 204336, [3, 3, 23, 1549], 1.5691948555320647)
(340285, 235840, [5, 11, 23, 269], 1.4428638059701493)
(344169, 196344, [3, 3, 3, 3, 7, 607], 1.7528877887788779)
(348219, 231984, [3, 3, 3, 3, 3, 1433], 1.5010474860335195)
(352221, 232512, [3, 113, 1039], 1.5148508464079273)
(384109, 349180, [11, 34919], 1.1000315023769975)
(400399, 399040, [431, 929], 1.00340567361668)
('----', 400399, [431, 929], 399040, 1.00340567361668)
(400993, 399040, [233, 1721], 1.004894246190858)
(409687, 407896, [269, 1523], 1.0043908251122835)
(431485, 345184, [5, 86297], 1.2500144850282748)
(432405, 230544, [3, 3, 3, 5, 3203], 1.8755855715178014)
(440413, 434140, [71, 6203], 1.0144492560003686)
(442881, 288144, [3, 3, 3, 47, 349], 1.537012743628186)
(449467, 447496, [263, 1709], 1.0044045086436526)
(452203, 432520, [23, 19661], 1.0455077221862572)
(456903, 304596, [3, 3, 50767], 1.5000295473348304)
(462285, 246528, [3, 3, 5, 10273], 1.875182535046729)
(462609, 264096, [3, 3, 7, 7, 1049], 1.7516698473282444)
(474883, 473488, [587, 809], 1.002946220389957)
('----', 474883, [587, 809], 473488, 1.002946220389957)
(480231, 320148, [3, 3, 53359], 1.5000281119982009)
(480249, 249480, [3, 3, 3, 3, 7, 7, 11, 11], 1.925)
(483605, 385640, [5, 311, 311], 1.2540322580645162)
(504601, 501604, [179, 2819], 1.005974832736581)
(504603, 305640, [3, 3, 3, 11, 1699], 1.6509717314487633)
(514323, 334152, [3, 3, 3, 43, 443], 1.5391887524240466)
(517023, 317520, [3, 3, 3, 3, 13, 491], 1.6283163265306122)
(525121, 521152, [137, 3833], 1.0076158203364853)
(529443, 352944, [3, 3, 3, 19609], 1.500076499388005)
(534621, 356412, [3, 178207], 1.5000084172250092)
(534663, 356436, [3, 3, 59407], 1.50002524997475)
(535761, 357156, [3, 3, 3, 19843], 1.5000755972180224)
(538641, 354816, [3, 3, 97, 617], 1.5180854301948052)
(539697, 359796, [3, 179899], 1.500008338058233)
(539967, 359976, [3, 179989], 1.5000083338889258)
(544435, 435544, [5, 108887], 1.2500114798964055)
(567873, 378576, [3, 3, 63097], 1.5000237732978319)
(568377, 378756, [3, 3, 3, 3, 3, 2339], 1.5006415739948673)
(569397, 379596, [3, 189799], 1.500007903139127)
(571443, 375144, [3, 67, 2843], 1.5232630669822789)
(574803, 375840, [3, 3, 3, 61, 349], 1.529382183908046)
(579067, 577096, [359, 1613], 1.0034153762978777)
(582109, 529180, [11, 52919], 1.100020786877811)
(584379, 375984, [3, 3, 29, 2239], 1.5542656070471084)
(590623, 536920, [11, 53693], 1.1000204872234225)
(600639, 369600, [3, 13, 15401], 1.6251055194805195)
(601983, 398160, [3, 3, 211, 317], 1.5119122965641953)
(603369, 369360, [3, 3, 3, 3, 3, 13, 191], 1.6335526315789475)
(615409, 594160, [29, 21221], 1.035763094116063)
(620235, 256320, [3, 3, 5, 7, 11, 179], 2.4197682584269664)
(622935, 326592, [3, 3, 5, 109, 127], 1.9073798500881833)
(624903, 392064, [3, 17, 12253], 1.5938800808031341)
(625041, 405216, [3, 3, 37, 1877], 1.5424884506041223)
(645027, 427560, [3, 211, 1019], 1.5086233511086162)
(646071, 416760, [3, 31, 6947], 1.5502231500143968)
(650343, 433560, [3, 216781], 1.5000069194575145)
(653043, 435360, [3, 217681], 1.5000068908489526)
(654231, 436152, [3, 218077], 1.500006878335993)
(657205, 525760, [5, 131441], 1.250009510042605)
(659943, 439956, [3, 3, 73327], 1.5000204565911137)
(661579, 659176, [317, 2087], 1.0036454603929754)
(674253, 425736, [3, 3, 19, 3943], 1.583734990698461)
(674521, 645172, [23, 29327], 1.0454901948627653)
(681993, 399168, [3, 3, 3, 13, 29, 67], 1.7085362554112553)
(706449, 470964, [3, 235483], 1.500006369913624)
(708865, 567088, [5, 141773], 1.2500088169737325)
(720783, 387072, [3, 3, 7, 17, 673], 1.8621419270833333)
(724371, 477312, [3, 89, 2713], 1.5176048370876911)
(726033, 376320, [3, 7, 7, 11, 449], 1.929296875)
(732031, 730312, [773, 947], 1.0023537885177842)
('----', 732031, [773, 947], 730312, 1.0023537885177842)
(734101, 731104, [269, 2729], 1.0040992799929969)
(734607, 473760, [3, 3, 31, 2633], 1.550588905775076)
(736297, 727936, [89, 8273], 1.0114858998593284)
(736365, 336576, [3, 5, 7, 7013], 2.18781196520251)
(740421, 447120, [3, 3, 3, 3, 3, 11, 277], 1.6559782608695652)
(742689, 482976, [3, 3, 3, 3, 53, 173], 1.537734794275492)
(746539, 739456, [107, 6977], 1.0095786632335122)
(747621, 427176, [3, 3, 7, 11867], 1.7501474801955166)
(778669, 776896, [797, 977], 1.0022821587445423)
('----', 778669, [797, 977], 776896, 1.0022821587445423)
(779281, 771892, [107, 7283], 1.0095725826929156)
(780109, 709180, [11, 70919], 1.100015510871711)
(783169, 781396, [827, 947], 1.0022690159662961)
('----', 783169, [827, 947], 781396, 1.0022690159662961)
(806487, 488760, [3, 11, 24439], 1.6500675178001474)
(806511, 511680, [3, 41, 79, 83], 1.576201923076923)
(818053, 813580, [191, 4283], 1.0054979227611298)
(821537, 785312, [23, 23, 1553], 1.0461281630740393)
(825003, 532080, [3, 3, 31, 2957], 1.5505243572395129)
(840861, 480168, [3, 3, 3, 3, 7, 1483], 1.7511808367071524)
(842389, 838924, [263, 3203], 1.0041302907057135)
(848043, 483840, [3, 3, 3, 7, 7, 641], 1.752734375)
(848833, 834388, [59, 14387], 1.017312089819125)
(852091, 801952, [17, 50123], 1.062521198276206)
(865479, 576984, [3, 288493], 1.500005199450938)
(866527, 862576, [233, 3719], 1.004580465953145)
(869751, 579816, [3, 3, 3, 32213], 1.5000465664969576)
(869965, 695968, [5, 173993], 1.2500071842383558)
(880567, 878560, [647, 1361], 1.0022844199599343)
(892581, 588192, [3, 89, 3343], 1.5174993879549534)
(895761, 597168, [3, 3, 99529], 1.5000150711357607)
(906543, 549360, [3, 3, 11, 9157], 1.6501802096985583)
(924075, 479520, [3, 3, 3, 5, 5, 37, 37], 1.9270833333333333)
(932085, 385920, [3, 3, 5, 7, 11, 269], 2.4152285447761193)
(940417, 917440, [41, 22937], 1.0250446895709802)
(959607, 579960, [3, 3, 3, 3, 3, 11, 359], 1.654608938547486)
(964395, 495936, [3, 3, 5, 29, 739], 1.9445956736353078)
(966753, 639576, [3, 3, 163, 659], 1.5115529663402003)
(974667, 649776, [3, 324889], 1.5000046169756962)
783169
9.27621845981
<<< Process finished. (Exit code 0)
================ READY ================
'''