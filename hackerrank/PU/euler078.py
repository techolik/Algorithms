
def solve(n, m=10 ** 9 + 7, p=False):
    cache = [[] for i in range(n)]
    cache[0] = [1] * n
    
    #for i, p in enumerate(primes[]):
    for i in range(2, n + 1):
        cache[i - 1] = cache[i - 2][:]
        for j in range(i, n + 1):
            r = 0
            remaining = j            
            while remaining > i:
                remaining -= i
                r += cache[i - 2][remaining - 1]
                #r %= m
            if remaining == i:
                r += 1
                
            cache[i - 1][j - 1] = (cache[i - 2][j - 1] + r) % m
    
    if p:
        for c in cache:
            print(c)
        
    return cache[-1][-1]
    
def solve2(n):
    cache = [[] for i in range(n)]
    cache[0] = [1] * n
    
    #for i, p in enumerate(primes[]):
    for i in range(2, n + 1):
        cache[i - 1] = cache[i - 2][:]
        for j in range(i, n + 1):  
            if j > i:
                r = cache[i - 1][j - i - 1]
            elif j == i:
                r = 1
            else:
                r = 0
            cache[i - 1][j - 1] = (cache[i - 2][j - 1] + r) % (10 ** 9 + 7)
            
    return cache[-1][-1]
    
#for i in range(2, 30):
#    print(i, solve(i), solve(i) - solve(i - 1))

def solve3(n):
    #http://en.wikipedia.org/wiki/Pentagonal_number_theorem
    
    cache = [1] * n
    
    panta = []
    k = 1
    for i in range(2 * int(n ** 0.5)):
        panta.append(k * (3 * k - 1) // 2)
        if k > 0:
            k = -k
        else:
            k = -k + 1
    
    for i in range(2, n + 1):
        s = 0
        j = 0
        x = panta[j]
        while x <= i:
            sign = -1 if j % 4 >= 2 else 1
            j += 1
            s += sign * cache[i - x - 1]
            x = panta[j]
            
        cache[i - 1] = s
    return cache
    
print(solve3(20))
#print(solve2(5 * 10 ** 3))
solve3(6 * 10 ** 4)
#solve(1 * 10 ** 3, 10 ** 9 + 7)
cache = {}
def f(i, j):
    #print(i, j)
    if i == 1:
        return 1
    if i == 0 or j == 0:
        return 0
    if i > j:
        return f(j, j)
    
    if cache.get((i, j), None):
        return cache[(i,j)]
    r = (f(i - 1, j) + f(i, j - i)) % 10 ** 9 + 7
    cache[(i,j)] = r
    return r

#print(f(2, 2))
#import sys
#sys.setrecursionlimit(100000)
#print(f(2000, 2000))
'''
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 2, 2, 3, 3, 4, 4, 5, 5, 6]
[1, 2, 3, 4, 5, 7, 8, 10, 12, 14]
[1, 2, 3, 5, 6, 9, 11, 15, 18, 23]
[1, 2, 3, 5, 7, 10, 13, 18, 23, 30]
[1, 2, 3, 5, 7, 11, 14, 20, 26, 35]
[1, 2, 3, 5, 7, 11, 15, 21, 28, 38]
[1, 2, 3, 5, 7, 11, 15, 22, 29, 40]
[1, 2, 3, 5, 7, 11, 15, 22, 30, 41]
[1, 2, 3, 5, 7, 11, 15, 22, 30, 42]

[1, 1, 1, 1, 1,  1,  1,  1,  1,  1,  1,  1,   1,   1,   1,   1,   1,   1,   1,   1]
[1, 2, 2, 3, 3,  4,  4,  5,  5,  6,  6,  7,   7,   8,   8,   9,   9,  10,  10,  11]
[1, 2, 3, 4, 5,  7,  8, 10, 12, 14, 16, 19,  21,  24,  27,  30,  33,  37,  40,  44]
[1, 2, 3, 5, 6,  9, 11, 15, 18, 23, 27, 34,  39,  47,  54,  64,  72,  84,  94, 108]
[1, 2, 3, 5, 7, 10, 13, 18, 23, 30, 37, 47,  57,  70,  84, 101, 119, 141, 164, 192]
[1, 2, 3, 5, 7, 11, 14, 20, 26, 35, 44, 58,  71,  90, 110, 136, 163, 199, 235, 282]
[1, 2, 3, 5, 7, 11, 15, 21, 28, 38, 49, 65,  82, 105, 131, 164, 201, 248, 300, 364]
[1, 2, 3, 5, 7, 11, 15, 22, 29, 40, 52, 70,  89, 116, 146, 186, 230, 288, 352, 434]
[1, 2, 3, 5, 7, 11, 15, 22, 30, 41, 54, 73,  94, 123, 157, 201, 252, 318, 393, 488]
[1, 2, 3, 5, 7, 11, 15, 22, 30, 42, 55, 75,  97, 128, 164, 212, 267, 340, 423, 530]
[1, 2, 3, 5, 7, 11, 15, 22, 30, 42, 56, 76,  99, 131, 169, 219, 278, 355, 445, 560]
[1, 2, 3, 5, 7, 11, 15, 22, 30, 42, 56, 77, 100, 133, 172, 224, 285, 366, 460, 582]
[1, 2, 3, 5, 7, 11, 15, 22, 30, 42, 56, 77, 101, 134, 174, 227, 290, 373, 471, 597]
[1, 2, 3, 5, 7, 11, 15, 22, 30, 42, 56, 77, 101, 135, 175, 229, 293, 378, 478, 608]
[1, 2, 3, 5, 7, 11, 15, 22, 30, 42, 56, 77, 101, 135, 176, 230, 295, 381, 483, 615]
[1, 2, 3, 5, 7, 11, 15, 22, 30, 42, 56, 77, 101, 135, 176, 231, 296, 383, 486, 620]
[1, 2, 3, 5, 7, 11, 15, 22, 30, 42, 56, 77, 101, 135, 176, 231, 297, 384, 488, 623]
[1, 2, 3, 5, 7, 11, 15, 22, 30, 42, 56, 77, 101, 135, 176, 231, 297, 385, 489, 625]
[1, 2, 3, 5, 7, 11, 15, 22, 30, 42, 56, 77, 101, 135, 176, 231, 297, 385, 490, 626]
[1, 2, 3, 5, 7, 11, 15, 22, 30, 42, 56, 77, 101, 135, 176, 231, 297, 385, 490, 627]
'''